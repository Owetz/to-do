{"version":3,"sources":["components/TodoEntry/TodoEntry.js","components/TodoList/TodoList.js","components/TodoInsert/TodoInsert.js","components/TodoCard/TodoCard.js","Todo.js","serviceWorker.js","index.js"],"names":["TodoEntry","props","useState","completed","complete","setComplete","content","className","onClick","TodoList","todos","map","e","key","TodoInsert","type","placeholder","TodoCard","lists","name","Todo","state","todoLists","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6WAkBeA,G,MAfG,SAACC,GAAW,IAAD,EACOC,mBAASD,EAAME,WADtB,mBAClBC,EADkB,KACRC,EADQ,OAEPH,mBAASD,EAAMK,SAA1BA,EAFkB,oBAGzB,OACI,yBAAKC,UAAWH,EAAW,uBAAyB,cAChD,uBAAGG,UAAWH,EAAW,sBAAwB,gBAAiBI,QAAS,kBAAMH,GAAaD,MAC9F,2BAAIE,GACJ,yBAAKC,UAAU,cACVH,EAAW,uBAAGG,UAAU,eAAoB,GAC7C,uBAAGA,UAAU,yBCIdE,EAZE,SAACR,GACd,IAAMS,EAAQT,EAAMS,MAAMC,KAAI,SAAAC,GAAM,IACzBN,EAAsBM,EAAtBN,QAASH,EAAaS,EAAbT,UAChB,OAAO,kBAAC,EAAD,CAAWU,IAAKP,EAASH,UAAWA,EAAWG,QAASA,OAEnE,OACI,yBAAKC,UAAU,YACVG,ICEEI,G,MATI,WACf,OACI,yBAAKP,UAAU,0BACX,2BAAOQ,KAAK,OAAOC,YAAY,iBAC/B,uBAAGT,UAAU,mBCiBVU,EApBE,SAAChB,GACd,IAAMiB,EAAQjB,EAAMS,MAAMC,KAAI,SAAAC,GAC1B,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAEO,KAAMA,KAAMP,EAAEO,KAAMT,MAAOE,EAAEF,WAGzD,OACI,yBAAKH,UAAU,QACX,yBAAKA,UAAU,eACX,4CAEJ,yBAAKA,UAAU,aACVW,EAGD,kBAAC,EAAD,SCODE,E,YArBb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,UAAW,CACT,CAACH,KAAK,QAAST,MAAM,CACnB,CAACP,WAAU,EAAOG,QAAQ,gBAC1B,CAACH,WAAU,EAAMG,QAAQ,kBAE3B,CAACa,KAAK,QAAST,MAAM,CACnB,CAACP,WAAU,EAAOG,QAAQ,oBATrB,E,sEAeX,OACE,kBAAC,EAAD,CAAUI,MAAOa,KAAKF,MAAMC,gB,GAjBfE,IAAMC,WCQLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dcad1890.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoEntry.css';\n\nconst TodoEntry = (props) => {\n    const [complete, setComplete] = useState(props.completed);\n    const [content] = useState(props.content);\n    return (\n        <div className={complete ? 'todo-entry completed' : 'todo-entry'}>\n            <i className={complete ? 'far fa-check-square' : 'far fa-square'} onClick={() => setComplete(!complete)}></i>\n            <p>{content}</p>\n            <div className=\"todo-utils\">\n                {complete ? <i className=\"fas fa-pen\"></i> : ''}\n                <i className=\"far fa-trash-alt\"></i>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoEntry;","import React from 'react';\nimport './TodoList.css';\nimport TodoEntry from '../TodoEntry/TodoEntry';\n\nconst TodoList = (props) => {\n    const todos = props.todos.map(e => {\n        const {content, completed} = e;\n        return <TodoEntry key={content} completed={completed} content={content} />;\n    });\n    return (\n        <div className=\"todolist\">\n            {todos}\n        </div>\n    )\n}\n\nexport default TodoList;","import React from 'react';\nimport './TodoInsert.css';\n\n\nconst TodoInsert = () => {\n    return (\n        <div className=\"todo-entry placeholder\">\n            <input type=\"text\" placeholder=\"Add To-Do...\" />\n            <i className=\"fas fa-plus\"></i>\n        </div>\n    )\n}\n\nexport default TodoInsert;","import React from 'react';\nimport './TodoCard.css';\nimport TodoList from '../TodoList/TodoList';\nimport TodoInsert from '../TodoInsert/TodoInsert';\n\nconst TodoCard = (props) => {\n    const lists = props.todos.map(e => {\n        return <TodoList key={e.name} name={e.name} todos={e.todos}/>\n    })\n    \n    return (\n        <div className=\"card\">\n            <div className=\"card-header\">\n                <h1>To-Do Lists</h1>\n            </div>\n            <div className=\"card-body\">\n                {lists}\n\n\n                <TodoInsert />\n            </div>\n        </div>\n    )\n}\n\nexport default TodoCard;","import React from 'react';\nimport './Todo.css';\nimport TodoCard from './components/TodoCard/TodoCard';\n\nclass Todo extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      todoLists: [\n        {name:'Test1', todos:[\n          {completed:false, content:'Testcontent1'},\n          {completed:true, content:'Testcontent2'}\n        ]},\n        {name:'Test2', todos:[\n          {completed:false, content:'TestContent3'}\n        ]}\n      ]\n    }\n  }\n  render() {\n    return (\n      <TodoCard todos={this.state.todoLists} />\n    )\n  }\n}\n\nexport default Todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}