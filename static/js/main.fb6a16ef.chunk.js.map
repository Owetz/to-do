{"version":3,"sources":["components/CardHeader/CardHeader.js","components/TodoEntry/TodoEntry.js","components/TodoInsert/TodoInsert.js","components/TodoCard/TodoCard.js","Todo.js","serviceWorker.js","index.js"],"names":["CardHeader","props","className","TodoEntry","todo","id","updateTodoItem","deleteTodoItem","useState","todoItem","setTodoItem","useEffect","editMode","setEditMode","content","setContent","updatetodoItemState","prevState","completed","onClick","type","value","autoFocus","onKeyPress","e","key","target","onChange","TodoInsert","insertTodoItem","placeholder","previousSibling","TodoCard","todoList","map","indexOf","localLists","JSON","parse","localStorage","getItem","Todo","setTodoList","console","log","setItem","stringify","updatedTodoList","item","index","Id","parentNode","updatedArray","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb6a16ef.chunk.js","sourcesContent":["import React from 'react';\nimport './CardHeader.css'\n\nconst CardHeader = (props) => {\n    //console.log(props);\n    return (\n        <div className=\"card-header\">\n            <h1>ToDo List</h1>\n            {/* {activeList ? (activeList.listName ? <h1>Todo List: {activeList.listName}</h1> :\n                <h1>Todo List: <input type=\"text\" id=\"listName\" placeholder=\"Enter list name: \" /><button onClick={updateListName}>Spara</button></h1>) :\n                <h1>Todo Lists</h1>}\n            {activeList ? null : <button onClick={createNewList}>Skapa ny lista</button>} */}\n        </div>\n    )\n}\n\nexport default CardHeader;","import React, {useState, useEffect} from 'react';\nimport './TodoEntry.css';\n\nconst TodoEntry = (props) => {\n    const {todo, id, updateTodoItem, deleteTodoItem} = props;\n\n    const [todoItem, setTodoItem] = useState(todo);\n    useEffect(() => {\n        updateTodoItem(id, todoItem);\n    },[todoItem]);\n\n    const [editMode, setEditMode] = useState(false);\n    const [content, setContent] = useState(todoItem.content);\n\n\n\n    //Funktioner\n    const updatetodoItemState = (todoItem) => {\n        setTodoItem(prevState => {return {...prevState, ...todoItem}});\n    } \n\n    const inputKey = (e) => {\n        if(e.key === 'Enter') {\n            todoItem.content = e.target.value;\n            updatetodoItemState(todoItem);\n            setEditMode(!editMode);\n        }\n    }\n\n    const setCompleted = () => {\n        todoItem.completed = !todoItem.completed;\n        updatetodoItemState(todoItem);\n    }\n\n    const updateTodoContent =(e) => {\n        setContent(e.target.value);\n    }\n\n    return (\n        <div id={id} className={todoItem.completed ? 'todo-entry completed' : 'todo-entry'}>\n            \n            <i className={todoItem.completed ? 'far fa-check-square' : 'far fa-square'} onClick={setCompleted}></i>\n            \n            {editMode ? <input type=\"text\" \n            value={content} \n            autoFocus \n            onKeyPress={inputKey} \n            onChange={updateTodoContent}/> : \n            <p>{content}</p>}\n\n            <div className=\"todo-utils\">\n                {todoItem.completed ? '' : (editMode ? '' : <i className=\"fas fa-pen\" onClick={() => setEditMode(!editMode)}></i>)}\n                <i className=\"far fa-trash-alt\" onClick={deleteTodoItem}></i>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoEntry;","import React from 'react';\nimport './TodoInsert.css';\n\n\nconst TodoInsert = (props) => {\n    const {insertTodoItem} = props;\n\n    const insertTodo = (e) => {\n        const value = e.target.previousSibling.value;\n        if (value) {\n            const newTodo = {completed: false, content:value};\n            insertTodoItem(newTodo);\n            e.target.previousSibling.value = '';\n        }\n    }\n\n    const saveTodo = (e) => {\n        if(e.key === 'Enter') {\n            const value = e.target.value;\n            if (value) {\n                const newTodo = {completed: false, content:value};\n                insertTodoItem(newTodo);\n                e.target.value = '';\n            }\n        }\n    }\n    \n\n    return (\n        <div className=\"todo-entry placeholder\">\n            <input type=\"text\" placeholder=\"Add To-Do...\" onKeyPress={saveTodo} />\n            <i className=\"fas fa-plus\" onClick={insertTodo}></i>\n        </div>\n    )\n}\n\nexport default TodoInsert;","import React from 'react';\nimport './TodoCard.css';\nimport TodoEntry from '../TodoEntry/TodoEntry';\nimport TodoInsert from '../TodoInsert/TodoInsert';\n\nconst TodoCard = (props) => {\n    const { todoList, updateTodoItem, insertTodoItem, deleteTodoItem } = props;\n\n    return (\n        <div className=\"card-body\">\n            {todoList.map(todo => {\n                return <TodoEntry \n                key={todoList.indexOf(todo)} \n                id={todoList.indexOf(todo)} \n                todo={todo} \n                updateTodoItem={updateTodoItem}\n                deleteTodoItem={deleteTodoItem} />\n            })}\n\n\n            <TodoInsert insertTodoItem={insertTodoItem} />\n        </div>\n    )\n}\n\nexport default TodoCard;","import React, { useState, useEffect } from 'react';\nimport './Todo.css';\nimport CardHeader from './components/CardHeader/CardHeader';\nimport TodoCard from './components/TodoCard/TodoCard';\n\nconst localLists = JSON.parse(localStorage.getItem('TodoLists')) || [];\n\nconst Todo = () => {\n  const [todoList, setTodoList] = useState(localLists);\n\n\n  useEffect(() => {\n    console.log(todoList);\n    localStorage.setItem('TodoLists', JSON.stringify(todoList));\n  }, [todoList]);\n\n  const updateTodoItem = (id, todoItem) => {\n    const updatedTodoList = todoList.map((item, index) => {\n      return index === id ? todoItem : item\n    })\n    setTodoList(updatedTodoList);\n  }\n\n  const insertTodoItem = (todoItem) => {\n    setTodoList(prevState => [...prevState, todoItem])\n  }\n\n  const deleteTodoItem = (e) => {\n    const Id = e.target.parentNode.parentNode.id;\n    const updatedArray = [...todoList];\n    updatedArray.splice(Id,1);\n    console.log(todoList);\n    console.log(updatedArray);\n    setTodoList(prevState => updatedArray);\n  }\n\n  return (\n    <div className=\"card\">\n      <CardHeader />\n\n      <TodoCard todoList={todoList} updateTodoItem={updateTodoItem} insertTodoItem={insertTodoItem} deleteTodoItem={deleteTodoItem}/>\n    </div>\n  )\n}\n\nexport default Todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}