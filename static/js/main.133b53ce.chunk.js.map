{"version":3,"sources":["components/TodoEntry/TodoEntry.js","components/TodoList/TodoList.js","components/TodoInsert/TodoInsert.js","components/TodoCard/TodoCard.js","Todo.js","serviceWorker.js","index.js"],"names":["TodoEntry","props","useState","completed","complete","setComplete","content","setContent","editMode","setEditMode","className","onClick","type","value","autoFocus","onKeyPress","e","key","onChange","target","parentNode","remove","TodoList","setList","todos","listName","todoElements","map","i","TodoInsert","list","placeholder","todo","newList","push","previousSibling","TodoCard","activeList","setActiveList","Todo","todoLists","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.133b53ce.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoEntry.css';\n\nconst TodoEntry = (props) => {\n    const [complete, setComplete] = useState(props.completed);\n    const [content, setContent] = useState(props.content);\n    const [editMode, setEditMode] = useState(false);\n    \n    function inputKey(e) {\n        if(e.key === 'Enter') {\n            setEditMode(!editMode);\n        }\n    }\n    function deleteTodo(e) {\n        e.target.parentNode.parentNode.remove()\n    }\n\n    return (\n        <div className={complete ? 'todo-entry completed' : 'todo-entry'}>\n            <i className={complete ? 'far fa-check-square' : 'far fa-square'} onClick={() => setComplete(!complete)}></i>\n            {editMode ? <input type=\"text\" value={content} autoFocus onKeyPress={inputKey} onChange={(e) => setContent(e.target.value)} />: <p>{content}</p>}\n            <div className=\"todo-utils\">\n                {complete ? '' : <i className=\"fas fa-pen\" onClick={() => setEditMode(!editMode)}></i>}\n                <i className=\"far fa-trash-alt\" onClick={deleteTodo}></i>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoEntry;","import React from 'react';\nimport './TodoList.css';\nimport TodoEntry from '../TodoEntry/TodoEntry';\n\nconst TodoList = (props) => {\n    const {setList, todos} = props;\n    const {listName} = todos;\n    const todoElements = todos.todos.map((e, i) => {\n        const {content, completed} = e;\n        return <TodoEntry key={listName+'-'+i} completed={completed} content={content} setList={setList}/>;\n    });\n    return (\n        <div className=\"todolist\">\n            {todoElements}\n        </div>\n    )\n}\n\nexport default TodoList;","import React from 'react';\nimport './TodoInsert.css';\n\n\nconst TodoInsert = (props) => {\n    //console.log(props);\n    const {setList, list} = props;\n    const insertTodo = (e) => {\n        const value = e.target.previousSibling.value;\n        if(value) {\n            const todo = {completed:false, content:e.target.previousSibling.value};\n            const newList = list.push(todo);\n            setList(newList);\n            e.target.previousSibling.value = '';\n        }\n    }\n    const saveTodo = (e) => {\n        if(e.key === 'Enter') {\n            if(e.target.value) {\n                const todo = {completed:false, content:e.target.value};\n                const newList = list.push(todo);\n                setList(newList);\n                e.target.value = '';\n            }\n        }\n    }\n    return (\n        <div className=\"todo-entry placeholder\">\n            <input type=\"text\" placeholder=\"Add To-Do...\" onKeyPress={saveTodo} />\n            <i className=\"fas fa-plus\" onClick={insertTodo}></i>\n        </div>\n    )\n}\n\nexport default TodoInsert;","import React, {useState} from 'react';\nimport './TodoCard.css';\nimport TodoList from '../TodoList/TodoList';\nimport TodoInsert from '../TodoInsert/TodoInsert';\n\nconst TodoCard = (props) => {\n    const [activeList, setActiveList] = useState(props.todos[0]);\n    const [list, setList] = useState(activeList.todos);\n\n    function listButtons(todos) {\n        return todos.map((e, i) => {\n            return <button key={i} onClick={() => setActiveList(todos[i])}>{e.listName}</button>\n        })\n    }\n    return (\n        <div className=\"card\">\n            <div className=\"card-header\">\n                <h1>To-Do List: {activeList.listName}</h1>\n                {listButtons(props.todos)}\n            </div>\n            <div className=\"card-body\">\n                <TodoList todos={activeList} setList={setList}/>\n\n\n                <TodoInsert list={activeList.todos} setList={setList}/>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoCard;","import React, {useState} from 'react';\nimport './Todo.css';\nimport TodoCard from './components/TodoCard/TodoCard';\n\nconst Todo = (props) => {\n  const [todoLists, setTodoLists] = useState(\n    [\n      {\n        listName: 'Test1', todos: [\n          { completed: false, content: 'Testcontent1' },\n          { completed: true, content: 'Testcontent2' }]\n      },\n      {\n        listName: 'Test2', todos: [\n          { completed: true, content: 'Testcontent3' }]\n      }\n    ]\n  );\n\n  \n  return (\n    <TodoCard todos={todoLists} />\n  )\n}\n\nexport default Todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}